import random
import termcolor
import time
Alive = True
score = 0
num_of_enemies = 3
thing = 0
current_items = []
saved_items = []
#list of things needed to do
#add more items
#make more uniquness to the levels
def enemy_moves (enemy_pos, last_saved, enemy_stunned, stuns_left, score, thing):
    global current_items
    ways_to_go = []
    ways = []
    dist = 0
    dire = "f"
    do = False
    rand = random.randint(1, 10)
    if moved == True:
        for i in range (len(current_items)):
            if current_items[i].wait > 0 and not current_items[i].turns == 1:
                current_items[i].turns -= 1
        if (cells[enemy_pos] == 2) and (enemy_stunned == False):
            score += 50
            enemy_stunned = True
            stuns_left = stun_num
            last_saved = 4
        elif enemy_stunned == True:
            if stuns_left == 0:
                if invincibility > 0 and cells[enemy_pos] == 2:
                    score += 50
                    stuns_left = stun_num
                else:
                    cells[enemy_pos] = 3
                    enemy_stunned = False
            else:
                stuns_left -= 1
        elif (rand < 5+thing):
            if not (cells[enemy_pos - 19] == 1 or cells[enemy_pos - 19] == 3):
                if cells[enemy_pos - 19] == 2 and invincibility > 0:
                    pass
                else:
                    do = True
                    continue1 = False
                    continue2 = False
                    ways_to_go.append("w")
                    enemy_r_temp = enemy_pos - 19
                    current_temp = current_pos
                    while True:
                        if enemy_r_temp > 18:
                            enemy_r_temp -= 19
                            dist += 1
                        else:
                            continue1 = True
                        if current_temp > 18:
                            current_temp -= 19
                            dist -= 1
                        else:
                            continue2 = True
                        if continue1 == True and continue2 == True:
                            dist = abs(dist)
                            dist += abs(enemy_r_temp - current_temp)
                            ways.append(dist)
                            break
            dist = 0
            if not (cells[enemy_pos - 1] == 1 or cells[enemy_pos - 1] == 3):
                if cells[enemy_pos - 1] == 2 and invincibility > 0:
                    pass
                else:
                    do = True
                    continue1 = False
                    continue2 = False
                    ways_to_go.append("a")
                    enemy_r_temp = enemy_pos - 1
                    current_temp = current_pos
                    while True:
                        if enemy_r_temp > 18:
                            enemy_r_temp -= 19
                            dist += 1
                        else:
                            continue1 = True
                        if current_temp > 18:
                            current_temp -= 19
                            dist -= 1
                        else:
                            continue2 = True
                        if continue1 == True and continue2 == True:
                            dist = abs(dist)
                            dist += abs(enemy_r_temp - current_temp)
                            ways.append(dist)
                            break
            dist = 0
            if not (cells[enemy_pos + 19] == 1 or cells[enemy_pos + 19] == 3):
                if cells[enemy_pos + 19] == 2 and invincibility > 0:
                    pass
                else:
                    do = True
                    continue1 = False
                    continue2 = False
                    ways_to_go.append("s")
                    enemy_r_temp = enemy_pos + 19
                    current_temp = current_pos
                    while True:
                        if enemy_r_temp > 18:
                            enemy_r_temp -= 19
                            dist += 1
                        else:
                            continue1 = True
                        if current_temp > 18:
                            current_temp -= 19
                            dist -= 1
                        else:
                            continue2 = True
                        if continue1 == True and continue2 == True:
                            dist = abs(dist)
                            dist += abs(enemy_r_temp - current_temp)
                            ways.append(dist)
                            break
            dist = 0
            if not (cells[enemy_pos + 1] == 1 or cells[enemy_pos + 1] == 3):
                if cells[enemy_pos + 1] == 2 and invincibility > 0:
                    pass
                else:
                    do = True
                    continue1 = False
                    continue2 = False
                    ways_to_go.append("d")
                    enemy_r_temp = enemy_pos + 1
                    current_temp = current_pos
                    while True:
                        if enemy_r_temp > 18:
                            enemy_r_temp -= 19
                            dist += 1
                        else:
                            continue1 = True
                        if current_temp > 18:
                            current_temp -= 19
                            dist -= 1
                        else:
                            continue2 = True
                        if continue1 == True and continue2 == True:
                            dist = abs(dist)
                            dist += abs(enemy_r_temp - current_temp)
                            ways.append(dist)
                            break
            if do == True:
                lowest = 100000000
                highest = 0
                for i in range(len(ways)):
                    if ways[i] < lowest:
                        lowest = ways[i]
                for i in range(len(ways)):
                    ways[i] -= (lowest - 1)
                for i in range(len(ways)):
                    if ways[i] > highest:
                        highest = ways[i]
                for i in range(len(ways)):
                    ways[i] = ((highest + 1) - ways[i])
                rand = random.randint(1, sum(ways))
                for i in range(len(ways)):
                    if ways[i] >= rand:
                        dire = ways_to_go[i]
                        break
                    else:
                        ways[i + 1] += ways[i]
            if dire == "w":
                cells[enemy_pos] = last_saved
                enemy_pos -= 19
                last_saved = cells[enemy_pos]
                cells[enemy_pos] = 3
            if dire == "a":
                cells[enemy_pos] = last_saved
                enemy_pos -= 1
                last_saved = cells[enemy_pos]
                cells[enemy_pos] = 3
            if dire == "s":
                cells[enemy_pos] = last_saved
                enemy_pos += 19
                last_saved = cells[enemy_pos]
                cells[enemy_pos] = 3
            if dire == "d":
                cells[enemy_pos] = last_saved
                enemy_pos += 1
                last_saved = cells[enemy_pos]
                cells[enemy_pos] = 3
    return enemy_pos, last_saved, enemy_stunned, stuns_left, score
def choose_tele_use():
    global current_pos
    global cells
    while True:
        choose_1 = input("How far down do you want to move?: ")
        choose_2 = input("How far right do you want to move?: ")
        choose = (int(choose_1)-1)*19 + (int(choose_2)-1)
        if cells[int(choose)] == 0 or cells[int(choose)] == 4:
            cells[current_pos] = 4
            current_pos = int(choose)
            cells[int(choose)] = 2
            break
def random_tele_use():
    global current_pos
    global cells
    while True:
        rand = random.randint(1,len(cells))
        if (cells[rand-1] == 0) or (cells[rand-1] == 4):
            cells[current_pos] = 4
            current_pos = rand
            cells[rand] = 2
            break
def random_power_use():
    global cells
    while True:
        rand = random.randint(1, len(cells))
        if cells[rand-1] == 0 or cells[rand-1] == 4:
            cells[rand-1] = 5
            break
def stun_all_use():
    global enemyList
    for i in range(num_of_enemies):
        enemyList[i].stuns += 1
        enemyList[i].stunned = True
def stun_one_use():
    global enemyList
    end = False
    while True:
        dis_1 = input("How far down is the enemy?: ")
        dis_2 = input("How far to the right is the enemy?: ")
        for i in range(num_of_enemies):
            if enemyList[i].position == ((int(dis_1)-1)*19) + (int(dis_2)-1):
                enemyList[i].stunned = True
                enemyList[i].stuns = 5
                end = True
                break
        if end == True:
            break
def get_invi_use():
    global invincibility
    invincibility += 10
def move_all_use():
    global enemyList
    for i in range(num_of_enemies):
        while True:
            rand = random.randint(1,len(cells)-1)
            if cells[rand] == 0 or cells[rand] == 4:
                cells[enemyList[i].position] = enemyList[i].previous
                enemyList[i].position = rand
                cells[enemyList[i].position] = 3
                break
def move_one_use():
    global cells
    global enemyList
    done = False
    while True:
        dis_1 = input("How far down is the enemy?: ")
        dis_2 = input("How far to the right is the enemy?: ")
        for i in range(num_of_enemies):
            if enemyList[i].position == ((int(dis_1) - 1) * 19) + (int(dis_2) - 1):
                while True:
                    choose_1 = input("How far down do you want to move it?: ")
                    choose_2 = input("How far right do you want to move it?: ")
                    choose = (int(choose_1) - 1) * 19 + (int(choose_2) - 1)
                    if cells[int(choose)] == 0 or cells[int(choose)] == 4:
                        cells[enemyList[i].position] = enemyList[i].previous
                        enemyList[i].position = choose
                        cells[enemyList[i].position] = 3
                        done = True
                        break
                break
        if done == True:
            break
def eat_one_use():
    global cells
    global enemyList
    done = False
    while True:
        dis_1 = input("How far down is the enemy?: ")
        dis_2 = input("How far to the right is the enemy?: ")
        for i in range(num_of_enemies):
            if enemyList[i].position == ((int(dis_1) - 1) * 19) + (int(dis_2) - 1):
                enemyList[i].stunned = True
                enemyList[i].stuns = 10000000000
                cells[enemyList[i].position] = enemyList[i].previous
                done = True
                break
        if done == True:
            break
def pass_turn_use():
    global moved
    moved = True
def eat_dot_use():
    global cells
    while True:
        rand = random.randint(1, len(cells))
        if cells[rand] == 0:
            cells[rand] = 4
            break
#extra life, remove one enemy for the rest of this round, (all charge items can be single use items), move on to the next stage, restart current level, recharge all items, recharge one item, get another choice of items, level up all of your items, level up one item, get double points for the c
class Enemy():
    def __init__(self, under, isStunned, stunsleft):
        self.position = 0
        self.previous = under
        self.stunned = isStunned
        self.stuns = stunsleft
class Item():
    def __init__(self, name, desc, wait, id, level, charges, turns):
        self.name = name
        self.desc = desc
        self.wait = wait
        self.id = id
        self.level = level
        self.charges = charges
        self.turns = turns
items = ["Choose Teleport MU", "Choose Teleport SU", "Random Teleport MU", "Random Teleport SU", "Random Power Pellet MU", "Random Power Pellet SU", "Stun all enemies MU", "Stun all enemies SU", "Stun One Enemy MU", "Stun One Enemy SU", "Become Invincible MU", "Become Invincible SU", "Move Enemies Randomly MU", "Move Enemies Randomly SU", "Move One Enemy MU", "Move One Enemy SU", "Eat One Enemy MU", "Eat One Pellet SU", "Pass Turn MU", "Pass Turn SU", "Eat One Dot MU", "Eat One Dot SU"]
item_desc = ["Teleport anywhere you want once every ", "Teleport anywhere you want once", "Teleport randomly once every ", "Teleport randomly once", "Randomly spawn a power pellet once every ", "Randomly spawn a power pellet once", "Stuns every enemy for 2 turns once every ", "Stuns every enemy for 2 turns once", "Stun a selected enemy for 5 turns once every ", "Stun a selected enemy for 5 turns once", "Become invincible for 10 turns once every ", "Become invincible for 10 turns once", "Move all enemies to a random place once every ", "Move all enemies to a random place once", "Choose where to move one enemy once every ", "Choose where to move one enemy once", "Eat one enemy once every ", "Eat one enemy once", "Pass a turn once every ", "Pass a turn once", "Eat one dot once every ", "Eat one dot once"]
wait_time = [300,0,150,0,250,0,200,0,120,0,250,0,150,0,100,0,500,0,30,0, 60, 0]
item_ids = [choose_tele_use,choose_tele_use,random_tele_use,random_tele_use,random_power_use,random_power_use,stun_all_use,stun_all_use,stun_one_use,stun_one_use,get_invi_use,get_invi_use,move_all_use,move_all_use,move_one_use,move_one_use,eat_one_use,eat_one_use,pass_turn_use,pass_turn_use, eat_dot_use, eat_dot_use]
other_keys = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20']
def instructions():
    print("Hello, Welcome to Pog-Man, here's some instructions on how to play.")
    print("A board will show up, you are the black dot, the enemies are the red dots, the dots you want to eat are blue, and special power dots are purple.")
    print("The goal of this game is to eat all of the blue dots in a stage, there are 10 stages in the game which get progressively harder.")
    print("To get stronger, you get items at the start of every stage. There are rechargable items that never run out signified with the MU and others that have a specified amount of uses signified by SU.")
    print("Each item has a 1, 2 and 3 level, where 3 is the best. You can use these items by going into the item menu and selecting the item you want to use.")
    print("The way to move is w a s d, where w is up, a is left, s is down, and d is right, also i is the item menu key.")
    print("Finally, there are some items that need you to put in coordinates, to use them, first enter how far down from the top the pixel is, and then how far right it is, for example the middle enemy on stage 1 starts at 10,10")
    print("Good Luck playing, there is a score that is kept track of, try to get the high score!")
    print("")
    continuee = input("Press Enter to Continue")
    print("")
instructions()
for p in range (10):
    if Alive == False:
        break
    cells = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,0, 1, 1, 5, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 5, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0,0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 3,3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0,0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0,0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 5, 0,1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 5, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1,0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0,1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,1, 1, 1]
    num_turns = 0
    invincibility = 0
    invincibility_num = 20 - (p*2)
    stun_num = 10 - (p)
    picked_item = []
    if (p+1) % 2 == 0:
        num_of_enemies += 1
        thing += 1
    rand = random.randint(1,30)
    enemyList = []
    for i in range(num_of_enemies):
        enemyList.append(Enemy(0, False, 0))
    enemyList[0].position = 179
    enemyList[1].position = 180
    enemyList[2].position = 181
    if num_of_enemies > 3:
        enemyList[3].position = 20
        cells[20] = 3
        if num_of_enemies > 4:
            enemyList[4].position = 36
            cells[36] = 3
            if num_of_enemies > 5:
                enemyList[5].position = len(cells) - 21
                cells[len(cells)-21] = 3
                if num_of_enemies > 6:
                    enemyList[6].position = len(cells) - 37
                    cells[len(cells)-37] = 3
                    if num_of_enemies > 7:
                        enemyList[7].position = 161
                        cells[161] = 3
    choose_item = []
    for i in range(3):
        while True:
            rand = random.randint(0,len(items)-1)
            if rand not in picked_item and rand not in saved_items:
                rand2 = random.randint(1, 11)
                if rand2 < 8:
                    level = 1
                elif rand2 < 11:
                    level = 2
                else:
                    level = 3
                choose_item.append(Item(items[rand], item_desc[rand], wait_time[rand], item_ids[rand], level, 0, 1) )
                print("Item "+str(i+1)+": "+str(choose_item[i].name)+" (Level: "+str(level)+")")
                choose_item[i].wait = (choose_item[i].wait * 2) / (level + 1)
                if choose_item[i].wait > 0:
                    print(choose_item[i].desc+str(int(choose_item[i].wait))+" turns.")
                else:
                    print(choose_item[i].desc+" ("+str(level)+" use)")
                    choose_item[i].charges = level
                print("")
                picked_item.append(rand)
                break
    pick_item = input("Which item do you want?: ")
    saved_items.append(picked_item[int(pick_item)-1])
    current_items.append(choose_item[int(pick_item)-1])
    while Alive:
        if invincibility > 0:
            invincibility -= 1
        moved = False
        num_turns += 1
        for i in range(len(cells)):
            if cells[i] == 1:
                termcolor.cprint("█", "white", end = '')
            elif cells[i] == 0:
                termcolor.cprint('█',"blue", end = '')
            elif cells[i] == 2:
                if invincibility > 0:
                    termcolor.cprint("█", "yellow", end='')
                else:
                    termcolor.cprint("█", "grey", end= '')
                current_pos = i
            elif cells[i] == 3:
                termcolor.cprint("█", "red", end= '')
            elif cells[i] == 4:
                print("█", end= '')
            else:
                termcolor.cprint("█", "magenta", end= '')
            if i % 19 == 18:
                print('')
        if cells.count(2) == 0:
            print("You Died")
            Alive = False
            break
        if cells.count(0) == 0:
            print("You Win")
            break
        while True:
            move = input("Where do you want to move? w a s d (i for items, h for help): ")
            if move == "win":
                invincibility = 10000
            if move == "win2":
                for i in range (len(cells)):
                    if cells[i] == 0:
                        cells[i] = 4
            if move == "i":
                for i in range (len(current_items)):
                    print(str(i+1))
                    print(current_items[i].name+" (Level: "+str(current_items[i].level)+")")
                    if current_items[i].wait > 0:
                        print(current_items[i].desc+str(int(current_items[i].wait))+" turns.")
                        if current_items[i].turns == 1:
                            print ("Ready to Use")
                        else:
                            print(str(int(current_items[i].turns-1))+" turns until ready.")
                    else:
                        print(current_items[i].desc+" ("+ str(current_items[i].charges)+" use)")
                    print("")
                item_choose = input("Which item do you want to choose 1-"+str(len(current_items))+"?: ")
                for i in range (len(current_items)):
                    if item_choose == other_keys[i]:
                        if current_items[i].wait > 0:
                            if current_items[i].turns == 1:
                                current_items[i].id()
                                current_items[i].turns += current_items[i].wait
                            else:
                                print("Not Ready Yet")
                                time.sleep(1.2)
                        else:
                            if current_items[i].charges > 0:
                                current_items[i].id()
                                current_items[i].charges -= 1
                            else:
                                print("No Uses Remaining")
                                time.sleep(1.2)
            if move == "h":
                instructions()
            if move =="w":
                if cells[current_pos -19] == 5:
                    invincibility += invincibility_num
                if cells[current_pos -19] == 3:
                    if invincibility > 0:
                        pass
                    else:
                        Alive = False
                        print("You Died")
                        moved = True
                if not cells[current_pos - 19] == 1:
                    cells[current_pos] = 4
                    cells[current_pos-19] = 2
                    moved = True
            if move =="a":
                if current_pos == 171:
                    cells[current_pos] = 4
                    cells[189] = 2
                    moved = True
                if cells[current_pos - 1] == 5:
                    invincibility += invincibility_num
                if cells[current_pos - 1] == 3:
                    if invincibility > 0:
                        pass
                    else:
                        Alive = False
                        print("You Died")
                        moved = True
                if not cells[current_pos -1] == 1:
                    cells[current_pos] = 4
                    cells[current_pos - 1] = 2
                    moved = True
            if move =="s":
                if cells[current_pos + 19] == 5:
                    invincibility += invincibility_num
                if cells[current_pos + 19] == 3:
                    if invincibility > 0:
                        pass
                    else:
                        Alive = False
                        print("You Died")
                        moved = True
                if not cells[current_pos+19] == 1:
                    cells[current_pos] = 4
                    cells[current_pos + 19] = 2
                    moved = True
            if move =="d":
                if current_pos == 189:
                    cells[current_pos] = 4
                    cells[171] = 2
                    moved = True
                if cells[current_pos +1] == 5:
                    invincibility += invincibility_num
                if cells[current_pos +1] == 3:
                    if invincibility > 0:
                        pass
                    else:
                        Alive = False
                        print("You Died")
                        moved = True
                if not cells[current_pos+1] == 1:
                    cells[current_pos] = 4
                    cells[current_pos +1] = 2
                    moved = True
            for i in range(num_of_enemies):
                enemy_ai = [enemy_moves(enemyList[i].position, enemyList[i].previous, enemyList[i].stunned, enemyList[i].stuns, score, thing)]
                enemyList[i].position = enemy_ai[0][0]
                enemyList[i].previous = enemy_ai[0][1]
                enemyList[i].stunned = enemy_ai[0][2]
                enemyList[i].stuns = enemy_ai[0][3]
                score = enemy_ai[0][4]
            break
    score += 10*(182-cells.count(0))
    score -= 50*(4-cells.count(5))
    score -= 100*(1-cells.count(2))
    score -= num_turns
    stage_num = p + 1
    if cells.count(2) == 0:
        Alive == False
    if Alive == True:
        print("You just completed Stage "+ str(stage_num)+".")
        print("Your score is "+str(score)+".")
        next_stage = input("Hit 'enter' when you're ready to go to the next stage")
        print("")
if Alive == False:
    score -= 100
else:
    print("Congratulations, You Win!")
old_scores = open("scores.txt", "r+")
score_list = [float(num) for num in old_scores.read().split()]
high_score = max(score_list)
print("Your score was "+str(score)+".")
print("The high score was "+str(high_score)+".")
old_scores.write("\n"+str(score))
